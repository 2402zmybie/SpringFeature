typeAliases标签:
    mybatis框架已经为我们设置好一些常用的类型的别名
    别名: string,long,int,double,boolean
    类型: String,Long,Integer,Double,Boolean


mybatis核心配置文件小结
    configuration里面的配置文件:
    1 properties标签
    2 typeAliases标签
    1 mappers标签


代理开发方式:
    采用Mybatis代理开发方式实现Dao层的开发, Mapper接口开发方式只需要程序员编写Mapper接口,注意规范:
    1 Mapper.xml文件中的namespace与mapper接口的全限定名相同
    2 Mapper接口方法名和Mapper.xml中定义的每个statement的id相同
    3 Mapper接口方法的输入参数和Mapper.xml中定义的每个sql的parameterType的类型相同
    4 Mapper接口方法的输出参数类型和Mapper.xml中定义的sql的resultType的类型相同
    总结: 不用写dao接口的实现类, mybatis会自动生成


动态sql:
    if配合where  是使用的重点
    choose
    trim
    foreach

代码抽取
<sql>  <include>


typeHandlers标签
重写类型处理器或者创建你自己的类型处理器来处理不支持的或非标准的类型


plugins标签:
PageHelper将分页的复杂操作进行封装, 使用简单方式即可以获得分页相关数据

小结:
myBatis核心配置文件常用标签:
    properties
    typeAliases
    environments
    typeHandlers
    plugins


多表关系,建表原则:
    一对一: 公用同一个主键, 在某一张表当中有一个外键和另一张表主键相关系
    一对多: 多的一方要有一个外键 和另外一个表的主键相关联
    多对多: 有一张中间表, 维护两张主表主键

Mybatis多表查询
    知识小结
    Mybatis多表配置方式
    一对一配置: 使用<resultMap>做配置
    一对多配置: 使用<resultMap>+<collection>做配置
    多对多配置: 使用<resultMap>+<collection>做配置


Mybatis常用注解开发
@Insert
@Update
@Delete
@Select
@Result 实现结果集封装
@Results 可以与@Result一起使用, 封装多个结果集
@One 实现一对一结果集封装
@Many 实现一对多结果集封装


